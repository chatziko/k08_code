
### reusable_modules

#### Usage

```
cd demo1 # or demo2 or demo3
make run LST_IMPL=linked
make run LST_IMPL=sequential
```

#### Περιγραφή

Ο κώδικας στο directory αυτό επιδεικνύει διάφορες τεχνικές οι οποίες
είναι χρήσιμες για την ανάπτυξη σχετικά μεγάλων προγραμμάτων.

- Περιλαμβάνται 3 modules
  - [list](modules/list): υλοποίηση του ADT List με 2 τρόπους:
    - sequential: με array
    - linked: συνδεδεμένη λίστα
  - [point](modules/point): αναπαράσταση σημείων (διανυσμάτων) n-διαστάσεων
    - υλοποίηση μέσω του list module
  - [stack](modules/stack): υλοποίηση του ADT Stack
    - υλοποίηση μέσω του list module

- Και 3 προγράμματα που επιδεικνύουν τα modules
  - [demo1](demo1): απ'ευθείας χρήση μια λίστας από strings
  - [demo2](demo2): χρήση points (που εσωτερικά χρησιμοποιούν lists)
  - [demo3](demo3): χρήση stack (που εσωτερικά χρησιμοποιεί lists)

- Δείχνεται πώς κάποια modules (point, stack) μπορούν να υλοποιήσουν μια δομή
δεδομένων __χρησιμοποιώντας εσωτερικά ένα άλλο module__ (list).

- Δείχνεται πώς __ο ίδιος κώδικας του module__ μπορεί να χρησιμοποιηθεί σε __διαφορετικά
προγράμματα__
  - τα modules (list, point, stack) βρίσκονται σε διαφορετικό directory από τα 
  προγράμματα (demo1, demo2, demo3), δεν υπάρχει διπλός κώδικας.
  - τα modules γίνονται compile σε κάθε πρόγραμμα μέσα από το αντίστοιχο Makefile
  του προγράμματος
  - κάθε module παρέχει ένα αρχείο [make.inc](modules/list/make.inc), το όποιο γίνεται include στο [Makefile](demo1/Makefile) του προγράμματος για να ρυθμιστεί σωστά το compilation
  (αυτός είναι ένας από τους πολλούς τρόπους οργάνωσης σύνθετων Makefiles)
  - ο compiler ρυθμίζεται (παράμετρος ```-I...```) ώστε να βρίσκει
  τα header files στο σωστό directory.
  
- Δείχνεται πώς η υλοποίηση ενός module μπορεί να αλλάξει εύκολα μέσω __conditional compilation__
  - βλέπε [modules/list/make.inc](modules/list/make.inc)
  - Ανάλογα με το ```LST_IMPL```
    - ρυθμίζεται να γίνει compile το αντίστοιχο .c αρχείο
    - δημιουργούνται τα κατάλληλα ```#define```s ώστε να λειτουργήσει
      το ```#ifdef``` στο modules/list.h

- Δείχνεται πώς χωρίς καμία αλλαγή στον κώδικα του list module μπορούν
να δημιουργηθούν λίστες διαφορετικών τύπων
  - demo1: λίστες από strings
  - point module: λίστες από double
  - stack module: λίστες από StItem
  - Η επιλογή του τύπου γίνεται από το __χρήστη του module__, δηλαδή:
    - για το demo1 που χρησιμοιεί strings: αρχείο [demo1/list_item.h](demo1/list_item.h)
    - για το point module που χρησιμοιεί double: αρχείο [modules/point/list_item.h](modules/point/list_item.h)
    - για το stack module που χρησιμοιεί StItem: αρχείο [modules/stack/list_item.h](modules/stack/list_item.h)
  - Στις δύο πρώτες περιπτώσεις, δείχνεται πώς κατάλληλες συναρτήσεις ```compare``` χρησιμοποιούνται για τον κάθε τύπο.


